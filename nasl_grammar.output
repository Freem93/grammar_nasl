

Terminals which are not used:

   AND_ASSIGN
   XOR_ASSIGN
   OR_ASSIGN
   COMMA
   COLON
   LEFT_SQ_BRACKET
   RIGHT_SQ_BRACKET


State 98 contains 24 shift/reduce conflicts.
State 99 contains 24 shift/reduce conflicts.
State 136 contains 24 shift/reduce conflicts.
State 137 contains 24 shift/reduce conflicts.
State 138 contains 24 shift/reduce conflicts.
State 139 contains 24 shift/reduce conflicts.
State 140 contains 24 shift/reduce conflicts.
State 141 contains 24 shift/reduce conflicts.
State 142 contains 24 shift/reduce conflicts.
State 143 contains 24 shift/reduce conflicts.
State 144 contains 24 shift/reduce conflicts.
State 162 contains 24 shift/reduce conflicts.
State 163 contains 24 shift/reduce conflicts.
State 164 contains 24 shift/reduce conflicts.
State 165 contains 24 shift/reduce conflicts.
State 166 contains 24 shift/reduce conflicts.
State 167 contains 24 shift/reduce conflicts.
State 168 contains 24 shift/reduce conflicts.
State 169 contains 24 shift/reduce conflicts.
State 170 contains 24 shift/reduce conflicts.
State 171 contains 24 shift/reduce conflicts.
State 172 contains 24 shift/reduce conflicts.
State 173 contains 24 shift/reduce conflicts.
State 174 contains 24 shift/reduce conflicts.
State 175 contains 24 shift/reduce conflicts.
State 176 contains 24 shift/reduce conflicts.
State 177 contains 24 shift/reduce conflicts.
State 178 contains 24 shift/reduce conflicts.
State 179 contains 24 shift/reduce conflicts.
State 180 contains 24 shift/reduce conflicts.
State 181 contains 24 shift/reduce conflicts.
State 182 contains 24 shift/reduce conflicts.
State 183 contains 24 shift/reduce conflicts.
State 184 contains 24 shift/reduce conflicts.
State 185 contains 24 shift/reduce conflicts.
State 193 contains 1 shift/reduce conflict.

Grammar
rule 1    start ->		/* empty */
rule 2    start -> command_declaration_list
rule 3    command_declaration_list -> command_declaration
rule 4    command_declaration_list -> command_declaration command_declaration_list
rule 5    command_declaration -> command
rule 6    command_declaration -> function_declaration
rule 7    function_declaration -> FUNCTION LEFT_PARENTHESIS argument_declaration RIGHT_PARENTHESIS body
rule 8    argument_declaration ->		/* empty */
rule 9    argument_declaration -> first_argument_declaration
rule 10   first_argument_declaration -> identifier
rule 11   first_argument_declaration -> identifier ',' first_argument_declaration
rule 12   body -> LEFT_BRACE command_list RIGHT_BRACE
rule 13   body -> LEFT_BRACE RIGHT_BRACE
rule 14   command_list -> command
rule 15   command_list -> command_list command
rule 16   command -> simple_command SEMICOLON
rule 17   command -> body
rule 18   command -> if_body
rule 19   command -> loop
rule 20   command -> COMMENT
rule 21   simple_command ->		/* empty */
rule 22   simple_command -> aff
rule 23   simple_command -> post_pre_command
rule 24   simple_command -> function_call
rule 25   simple_command -> ret
rule 26   simple_command -> inc
rule 27   simple_command -> loc
rule 28   simple_command -> glob
rule 29   simple_command -> BREAK
rule 30   simple_command -> CONTINUE
rule 31   ret -> RETURN expression
rule 32   ret -> RETURN
rule 33   if_body -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command
rule 34   if_body -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command ELSE command
rule 35   loop -> for_loop
rule 36   loop -> while_loop
rule 37   loop -> repeat_loop
rule 38   loop -> foreach_loop
rule 39   for_loop -> FOR LEFT_PARENTHESIS aff_func ';' expression ';' aff_func RIGHT_PARENTHESIS command
rule 40   while_loop -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command
rule 41   repeat_loop -> REPEAT command UNTIL expression ';'
rule 42   foreach_loop -> FOREACH identifier LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command
rule 43   aff_func ->		/* empty */
rule 44   aff_func -> aff
rule 45   aff_func -> post_pre_command
rule 46   aff_func -> function_call
rule 47   inc -> INCLUDE LEFT_PARENTHESIS STR_FIRST RIGHT_PARENTHESIS
rule 48   function_call -> identifier LEFT_PARENTHESIS argument_list RIGHT_PARENTHESIS
rule 49   argument_list ->		/* empty */
rule 50   argument_list -> first_argument_list
rule 51   first_argument_list -> argument
rule 52   first_argument_list -> first_argument_list ',' argument
rule 53   argument -> expression
rule 54   argument -> identifier ':' expression
rule 55   aff -> lvalue ASSIGN expression
rule 56   aff -> lvalue ADD_ASSIGN expression
rule 57   aff -> lvalue SUB_ASSIGN expression
rule 58   aff -> lvalue MUL_ASSIGN expression
rule 59   aff -> lvalue DIV_ASSIGN expression
rule 60   aff -> lvalue MOD_ASSIGN expression
rule 61   aff -> lvalue RIGHT_ASSIGN expression
rule 62   aff -> lvalue RIGHT_RIGHT_ASSIGN expression
rule 63   aff -> lvalue LEFT_ASSIGN expression
rule 64   lvalue -> identifier
rule 65   lvalue -> array_elem
rule 66   identifier -> IDENTIFIER
rule 67   array_elem -> identifier '[' array_index ']'
rule 68   array_index -> expression
rule 69   post_pre_command -> INC_OP lvalue
rule 70   post_pre_command -> DEC_OP lvalue
rule 71   post_pre_command -> lvalue INC_OP
rule 72   post_pre_command -> lvalue DEC_OP
rule 73   expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
rule 74   expression -> expression AND_OP expression
rule 75   expression -> NOT expression
rule 76   expression -> expression OR_OP expression
rule 77   expression -> expression ADD expression
rule 78   expression -> expression SUB expression
rule 79   expression -> BIT expression
rule 80   expression -> expression DIV expression
rule 81   expression -> expression MOD expression
rule 82   expression -> expression AND expression
rule 83   expression -> expression XOR expression
rule 84   expression -> expression OR expression
rule 85   expression -> expression RIGHT_OP expression
rule 86   expression -> expression RIGHT_OP_3 expression
rule 87   expression -> expression LEFT_OP expression
rule 88   expression -> post_pre_command
rule 89   expression -> expression MUL expression
rule 90   expression -> expression POWER expression
rule 91   expression -> expression NE expression
rule 92   expression -> expression EQ expression
rule 93   expression -> expression LT expression
rule 94   expression -> expression GT expression
rule 95   expression -> expression LE expression
rule 96   expression -> expression GE expression
rule 97   expression -> expression ASSIGN_BIT expression
rule 98   expression -> expression NOT_BIT expression
rule 99   expression -> expression SEARCH_SUBSTR expression
rule 100  expression -> expression NOT_SEARCH_SUBSTR expression
rule 101  expression -> var
rule 102  expression -> aff
rule 103  expression -> ipaddr
rule 104  expression -> atom
rule 105  expression -> const_array
rule 106  const_array -> '[' list_array_data ']'
rule 107  list_array_data -> array_data
rule 108  list_array_data -> array_data ',' list_array_data
rule 109  array_data -> simple_array_data
rule 110  array_data -> STR_FIRST ARROW simple_array_data
rule 111  atom -> INTEGER
rule 112  atom -> STR_FIRST
rule 113  simple_array_data -> atom
rule 114  var -> var_name
rule 115  var -> array_elem
rule 116  var -> function_call
rule 117  var_name -> identifier
rule 118  ipaddr -> INTEGER '.' INTEGER '.' INTEGER '.' INTEGER
rule 119  loc -> LOCAL argument_declaration
rule 120  glob -> GLOBAL argument_declaration

Terminals, with rules where they appear

$ (-1)
',' (44) 11 52 108
'.' (46) 118
':' (58) 54
';' (59) 39 41
'[' (91) 67 106
']' (93) 67 106
error (256)
EQ (258) 92
NE (259) 91
LT (260) 93
GT (261) 94
LE (262) 95
GE (263) 96
SEARCH_SUBSTR (264) 99
NOT_SEARCH_SUBSTR (265) 100
POWER (266) 90
ADD (267) 77
SUB (268) 78
MUL (269) 89
DIV (270) 80
MOD (271) 81
XOR (272) 83
OR (273) 84
OR_OP (274) 76
IF (275) 33 34
ELSE (276) 34
FOR (277) 39
FOREACH (278) 42
WHILE (279) 40
REPEAT (280) 41
UNTIL (281) 41
BREAK (282) 29
CONTINUE (283) 30
RETURN (284) 31 32
INCLUDE (285) 47
STR_FIRST (286) 47 110 112
FUNCTION (287) 7
ASSIGN (288) 55
RIGHT_ASSIGN (289) 61
RIGHT_RIGHT_ASSIGN (290) 62
LEFT_ASSIGN (291) 63
ADD_ASSIGN (292) 56
SUB_ASSIGN (293) 57
MUL_ASSIGN (294) 58
DIV_ASSIGN (295) 59
MOD_ASSIGN (296) 60
AND_ASSIGN (297)
XOR_ASSIGN (298)
OR_ASSIGN (299)
RIGHT_OP (300) 85
RIGHT_OP_3 (301) 86
LEFT_OP (302) 87
INC_OP (303) 69 71
DEC_OP (304) 70 72
AND_OP (305) 74
AND (306) 82
SEMICOLON (307) 16
LEFT_BRACE (308) 12 13
RIGHT_BRACE (309) 12 13
COMMA (310)
COLON (311)
LEFT_PARENTHESIS (312) 7 33 34 39 40 42 47 48 73
RIGHT_PARENTHESIS (313) 7 33 34 39 40 42 47 48 73
LEFT_SQ_BRACKET (314)
RIGHT_SQ_BRACKET (315)
NOT (316) 75
BIT (317) 79
NOT_BIT (318) 98
ARROW (319) 110
ASSIGN_BIT (320) 97
INTEGER (321) 111 118
IDENTIFIER (322) 66
LOCAL (323) 119
GLOBAL (324) 120
COMMENT (325) 20

Nonterminals, with rules where they appear

start (77)
    on left: 1 2
command_declaration_list (78)
    on left: 3 4, on right: 2 4
command_declaration (79)
    on left: 5 6, on right: 3 4
function_declaration (80)
    on left: 7, on right: 6
argument_declaration (81)
    on left: 8 9, on right: 7 119 120
first_argument_declaration (82)
    on left: 10 11, on right: 9 11
body (83)
    on left: 12 13, on right: 7 17
command_list (84)
    on left: 14 15, on right: 12 15
command (85)
    on left: 16 17 18 19 20, on right: 5 14 15 33 34 39 40 41 42
simple_command (86)
    on left: 21 22 23 24 25 26 27 28 29 30, on right: 16
ret (87)
    on left: 31 32, on right: 25
if_body (88)
    on left: 33 34, on right: 18
loop (89)
    on left: 35 36 37 38, on right: 19
for_loop (90)
    on left: 39, on right: 35
while_loop (91)
    on left: 40, on right: 36
repeat_loop (92)
    on left: 41, on right: 37
foreach_loop (93)
    on left: 42, on right: 38
aff_func (94)
    on left: 43 44 45 46, on right: 39
inc (95)
    on left: 47, on right: 26
function_call (96)
    on left: 48, on right: 24 46 116
argument_list (97)
    on left: 49 50, on right: 48
first_argument_list (98)
    on left: 51 52, on right: 50 52
argument (99)
    on left: 53 54, on right: 51 52
aff (100)
    on left: 55 56 57 58 59 60 61 62 63, on right: 22 44 102
lvalue (101)
    on left: 64 65, on right: 55 56 57 58 59 60 61 62 63 69 70 71 72
identifier (102)
    on left: 66, on right: 10 11 42 48 54 64 67 117
array_elem (103)
    on left: 67, on right: 65 115
array_index (104)
    on left: 68, on right: 67
post_pre_command (105)
    on left: 69 70 71 72, on right: 23 45 88
expression (106)
    on left: 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90
    91 92 93 94 95 96 97 98 99 100 101 102 103 104 105,
    on right: 31 33 34 39 40 41 42 53 54 55 56 57 58 59 60 61 62 63
    68 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 89 90 91 92 93
    94 95 96 97 98 99 100
const_array (107)
    on left: 106, on right: 105
list_array_data (108)
    on left: 107 108, on right: 106 108
array_data (109)
    on left: 109 110, on right: 107 108
atom (110)
    on left: 111 112, on right: 104 113
simple_array_data (111)
    on left: 113, on right: 109 110
var (112)
    on left: 114 115 116, on right: 101
var_name (113)
    on left: 117, on right: 114
ipaddr (114)
    on left: 118, on right: 103
loc (115)
    on left: 119, on right: 27
glob (116)
    on left: 120, on right: 28


state 0

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    FUNCTION	shift, and go to state 10
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    SEMICOLON	reduce using rule 21 (simple_command)
    $default	reduce using rule 1 (start)

    start	go to state 214
    command_declaration_list	go to state 18
    command_declaration	go to state 19
    function_declaration	go to state 20
    body	go to state 21
    command	go to state 22
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 1

    if_body  ->  IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command   (rule 33)
    if_body  ->  IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command ELSE command   (rule 34)

    LEFT_PARENTHESIS	shift, and go to state 40



state 2

    for_loop  ->  FOR . LEFT_PARENTHESIS aff_func ';' expression ';' aff_func RIGHT_PARENTHESIS command   (rule 39)

    LEFT_PARENTHESIS	shift, and go to state 41



state 3

    foreach_loop  ->  FOREACH . identifier LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command   (rule 42)

    IDENTIFIER	shift, and go to state 14

    identifier	go to state 42



state 4

    while_loop  ->  WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command   (rule 40)

    LEFT_PARENTHESIS	shift, and go to state 43



state 5

    repeat_loop  ->  REPEAT . command UNTIL expression ';'   (rule 41)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    $default	reduce using rule 21 (simple_command)

    body	go to state 21
    command	go to state 44
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 6

    simple_command  ->  BREAK .   (rule 29)

    $default	reduce using rule 29 (simple_command)



state 7

    simple_command  ->  CONTINUE .   (rule 30)

    $default	reduce using rule 30 (simple_command)



state 8

    ret  ->  RETURN . expression   (rule 31)
    ret  ->  RETURN .   (rule 32)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    $default	reduce using rule 32 (ret)

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 56
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 9

    inc  ->  INCLUDE . LEFT_PARENTHESIS STR_FIRST RIGHT_PARENTHESIS   (rule 47)

    LEFT_PARENTHESIS	shift, and go to state 62



state 10

    function_declaration  ->  FUNCTION . LEFT_PARENTHESIS argument_declaration RIGHT_PARENTHESIS body   (rule 7)

    LEFT_PARENTHESIS	shift, and go to state 63



state 11

    post_pre_command  ->  INC_OP . lvalue   (rule 69)

    IDENTIFIER	shift, and go to state 14

    lvalue	go to state 64
    identifier	go to state 65
    array_elem	go to state 36



state 12

    post_pre_command  ->  DEC_OP . lvalue   (rule 70)

    IDENTIFIER	shift, and go to state 14

    lvalue	go to state 66
    identifier	go to state 65
    array_elem	go to state 36



state 13

    body  ->  LEFT_BRACE . command_list RIGHT_BRACE   (rule 12)
    body  ->  LEFT_BRACE . RIGHT_BRACE   (rule 13)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    RIGHT_BRACE	shift, and go to state 67
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    $default	reduce using rule 21 (simple_command)

    body	go to state 21
    command_list	go to state 68
    command	go to state 69
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 14

    identifier  ->  IDENTIFIER .   (rule 66)

    $default	reduce using rule 66 (identifier)



state 15

    loc  ->  LOCAL . argument_declaration   (rule 119)

    IDENTIFIER	shift, and go to state 14

    $default	reduce using rule 8 (argument_declaration)

    argument_declaration	go to state 70
    first_argument_declaration	go to state 71
    identifier	go to state 72



state 16

    glob  ->  GLOBAL . argument_declaration   (rule 120)

    IDENTIFIER	shift, and go to state 14

    $default	reduce using rule 8 (argument_declaration)

    argument_declaration	go to state 73
    first_argument_declaration	go to state 71
    identifier	go to state 72



state 17

    command  ->  COMMENT .   (rule 20)

    $default	reduce using rule 20 (command)



state 18

    start  ->  command_declaration_list .   (rule 2)

    $default	reduce using rule 2 (start)



state 19

    command_declaration_list  ->  command_declaration .   (rule 3)
    command_declaration_list  ->  command_declaration . command_declaration_list   (rule 4)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    FUNCTION	shift, and go to state 10
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    SEMICOLON	reduce using rule 21 (simple_command)
    $default	reduce using rule 3 (command_declaration_list)

    command_declaration_list	go to state 74
    command_declaration	go to state 19
    function_declaration	go to state 20
    body	go to state 21
    command	go to state 22
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 20

    command_declaration  ->  function_declaration .   (rule 6)

    $default	reduce using rule 6 (command_declaration)



state 21

    command  ->  body .   (rule 17)

    $default	reduce using rule 17 (command)



state 22

    command_declaration  ->  command .   (rule 5)

    $default	reduce using rule 5 (command_declaration)



state 23

    command  ->  simple_command . SEMICOLON   (rule 16)

    SEMICOLON	shift, and go to state 75



state 24

    simple_command  ->  ret .   (rule 25)

    $default	reduce using rule 25 (simple_command)



state 25

    command  ->  if_body .   (rule 18)

    $default	reduce using rule 18 (command)



state 26

    command  ->  loop .   (rule 19)

    $default	reduce using rule 19 (command)



state 27

    loop  ->  for_loop .   (rule 35)

    $default	reduce using rule 35 (loop)



state 28

    loop  ->  while_loop .   (rule 36)

    $default	reduce using rule 36 (loop)



state 29

    loop  ->  repeat_loop .   (rule 37)

    $default	reduce using rule 37 (loop)



state 30

    loop  ->  foreach_loop .   (rule 38)

    $default	reduce using rule 38 (loop)



state 31

    simple_command  ->  inc .   (rule 26)

    $default	reduce using rule 26 (simple_command)



state 32

    simple_command  ->  function_call .   (rule 24)

    $default	reduce using rule 24 (simple_command)



state 33

    simple_command  ->  aff .   (rule 22)

    $default	reduce using rule 22 (simple_command)



state 34

    aff  ->  lvalue . ASSIGN expression   (rule 55)
    aff  ->  lvalue . ADD_ASSIGN expression   (rule 56)
    aff  ->  lvalue . SUB_ASSIGN expression   (rule 57)
    aff  ->  lvalue . MUL_ASSIGN expression   (rule 58)
    aff  ->  lvalue . DIV_ASSIGN expression   (rule 59)
    aff  ->  lvalue . MOD_ASSIGN expression   (rule 60)
    aff  ->  lvalue . RIGHT_ASSIGN expression   (rule 61)
    aff  ->  lvalue . RIGHT_RIGHT_ASSIGN expression   (rule 62)
    aff  ->  lvalue . LEFT_ASSIGN expression   (rule 63)
    post_pre_command  ->  lvalue . INC_OP   (rule 71)
    post_pre_command  ->  lvalue . DEC_OP   (rule 72)

    ASSIGN	shift, and go to state 76
    RIGHT_ASSIGN	shift, and go to state 77
    RIGHT_RIGHT_ASSIGN	shift, and go to state 78
    LEFT_ASSIGN	shift, and go to state 79
    ADD_ASSIGN	shift, and go to state 80
    SUB_ASSIGN	shift, and go to state 81
    MUL_ASSIGN	shift, and go to state 82
    DIV_ASSIGN	shift, and go to state 83
    MOD_ASSIGN	shift, and go to state 84
    INC_OP	shift, and go to state 85
    DEC_OP	shift, and go to state 86



state 35

    function_call  ->  identifier . LEFT_PARENTHESIS argument_list RIGHT_PARENTHESIS   (rule 48)
    lvalue  ->  identifier .   (rule 64)
    array_elem  ->  identifier . '[' array_index ']'   (rule 67)

    LEFT_PARENTHESIS	shift, and go to state 87
    '[' 	shift, and go to state 88

    $default	reduce using rule 64 (lvalue)



state 36

    lvalue  ->  array_elem .   (rule 65)

    $default	reduce using rule 65 (lvalue)



state 37

    simple_command  ->  post_pre_command .   (rule 23)

    $default	reduce using rule 23 (simple_command)



state 38

    simple_command  ->  loc .   (rule 27)

    $default	reduce using rule 27 (simple_command)



state 39

    simple_command  ->  glob .   (rule 28)

    $default	reduce using rule 28 (simple_command)



state 40

    if_body  ->  IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS command   (rule 33)
    if_body  ->  IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS command ELSE command   (rule 34)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 89
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 41

    for_loop  ->  FOR LEFT_PARENTHESIS . aff_func ';' expression ';' aff_func RIGHT_PARENTHESIS command   (rule 39)

    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    IDENTIFIER	shift, and go to state 14

    $default	reduce using rule 43 (aff_func)

    aff_func	go to state 90
    function_call	go to state 91
    aff 	go to state 92
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 93



state 42

    foreach_loop  ->  FOREACH identifier . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command   (rule 42)

    LEFT_PARENTHESIS	shift, and go to state 94



state 43

    while_loop  ->  WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS command   (rule 40)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 95
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 44

    repeat_loop  ->  REPEAT command . UNTIL expression ';'   (rule 41)

    UNTIL	shift, and go to state 96



state 45

    atom  ->  STR_FIRST .   (rule 112)

    $default	reduce using rule 112 (atom)



state 46

    expression  ->  LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS   (rule 73)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 97
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 47

    expression  ->  NOT . expression   (rule 75)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 98
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 48

    expression  ->  BIT . expression   (rule 79)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 99
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 49

    atom  ->  INTEGER .   (rule 111)
    ipaddr  ->  INTEGER . '.' INTEGER '.' INTEGER '.' INTEGER   (rule 118)

    '.' 	shift, and go to state 100

    $default	reduce using rule 111 (atom)



state 50

    const_array  ->  '[' . list_array_data ']'   (rule 106)

    STR_FIRST	shift, and go to state 101
    INTEGER	shift, and go to state 102

    list_array_data	go to state 103
    array_data	go to state 104
    atom	go to state 105
    simple_array_data	go to state 106



state 51

    var  ->  function_call .   (rule 116)

    $default	reduce using rule 116 (var)



state 52

    expression  ->  aff .   (rule 102)

    $default	reduce using rule 102 (expression)



state 53

    function_call  ->  identifier . LEFT_PARENTHESIS argument_list RIGHT_PARENTHESIS   (rule 48)
    lvalue  ->  identifier .   (rule 64)
    array_elem  ->  identifier . '[' array_index ']'   (rule 67)
    var_name  ->  identifier .   (rule 117)

    LEFT_PARENTHESIS	shift, and go to state 87
    '[' 	shift, and go to state 88

    ASSIGN	reduce using rule 64 (lvalue)
    RIGHT_ASSIGN	reduce using rule 64 (lvalue)
    RIGHT_RIGHT_ASSIGN	reduce using rule 64 (lvalue)
    LEFT_ASSIGN	reduce using rule 64 (lvalue)
    ADD_ASSIGN	reduce using rule 64 (lvalue)
    SUB_ASSIGN	reduce using rule 64 (lvalue)
    MUL_ASSIGN	reduce using rule 64 (lvalue)
    DIV_ASSIGN	reduce using rule 64 (lvalue)
    MOD_ASSIGN	reduce using rule 64 (lvalue)
    INC_OP	reduce using rule 64 (lvalue)
    DEC_OP	reduce using rule 64 (lvalue)
    $default	reduce using rule 117 (var_name)



state 54

    lvalue  ->  array_elem .   (rule 65)
    var  ->  array_elem .   (rule 115)

    ASSIGN	reduce using rule 65 (lvalue)
    RIGHT_ASSIGN	reduce using rule 65 (lvalue)
    RIGHT_RIGHT_ASSIGN	reduce using rule 65 (lvalue)
    LEFT_ASSIGN	reduce using rule 65 (lvalue)
    ADD_ASSIGN	reduce using rule 65 (lvalue)
    SUB_ASSIGN	reduce using rule 65 (lvalue)
    MUL_ASSIGN	reduce using rule 65 (lvalue)
    DIV_ASSIGN	reduce using rule 65 (lvalue)
    MOD_ASSIGN	reduce using rule 65 (lvalue)
    INC_OP	reduce using rule 65 (lvalue)
    DEC_OP	reduce using rule 65 (lvalue)
    $default	reduce using rule 115 (var)



state 55

    expression  ->  post_pre_command .   (rule 88)

    $default	reduce using rule 88 (expression)



state 56

    ret  ->  RETURN expression .   (rule 31)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    $default	reduce using rule 31 (ret)



state 57

    expression  ->  const_array .   (rule 105)

    $default	reduce using rule 105 (expression)



state 58

    expression  ->  atom .   (rule 104)

    $default	reduce using rule 104 (expression)



state 59

    expression  ->  var .   (rule 101)

    $default	reduce using rule 101 (expression)



state 60

    var  ->  var_name .   (rule 114)

    $default	reduce using rule 114 (var)



state 61

    expression  ->  ipaddr .   (rule 103)

    $default	reduce using rule 103 (expression)



state 62

    inc  ->  INCLUDE LEFT_PARENTHESIS . STR_FIRST RIGHT_PARENTHESIS   (rule 47)

    STR_FIRST	shift, and go to state 131



state 63

    function_declaration  ->  FUNCTION LEFT_PARENTHESIS . argument_declaration RIGHT_PARENTHESIS body   (rule 7)

    IDENTIFIER	shift, and go to state 14

    $default	reduce using rule 8 (argument_declaration)

    argument_declaration	go to state 132
    first_argument_declaration	go to state 71
    identifier	go to state 72



state 64

    post_pre_command  ->  INC_OP lvalue .   (rule 69)

    $default	reduce using rule 69 (post_pre_command)



state 65

    lvalue  ->  identifier .   (rule 64)
    array_elem  ->  identifier . '[' array_index ']'   (rule 67)

    '[' 	shift, and go to state 88

    $default	reduce using rule 64 (lvalue)



state 66

    post_pre_command  ->  DEC_OP lvalue .   (rule 70)

    $default	reduce using rule 70 (post_pre_command)



state 67

    body  ->  LEFT_BRACE RIGHT_BRACE .   (rule 13)

    $default	reduce using rule 13 (body)



state 68

    body  ->  LEFT_BRACE command_list . RIGHT_BRACE   (rule 12)
    command_list  ->  command_list . command   (rule 15)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    RIGHT_BRACE	shift, and go to state 133
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    $default	reduce using rule 21 (simple_command)

    body	go to state 21
    command	go to state 134
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 69

    command_list  ->  command .   (rule 14)

    $default	reduce using rule 14 (command_list)



state 70

    loc  ->  LOCAL argument_declaration .   (rule 119)

    $default	reduce using rule 119 (loc)



state 71

    argument_declaration  ->  first_argument_declaration .   (rule 9)

    $default	reduce using rule 9 (argument_declaration)



state 72

    first_argument_declaration  ->  identifier .   (rule 10)
    first_argument_declaration  ->  identifier . ',' first_argument_declaration   (rule 11)

    ',' 	shift, and go to state 135

    $default	reduce using rule 10 (first_argument_declaration)



state 73

    glob  ->  GLOBAL argument_declaration .   (rule 120)

    $default	reduce using rule 120 (glob)



state 74

    command_declaration_list  ->  command_declaration command_declaration_list .   (rule 4)

    $default	reduce using rule 4 (command_declaration_list)



state 75

    command  ->  simple_command SEMICOLON .   (rule 16)

    $default	reduce using rule 16 (command)



state 76

    aff  ->  lvalue ASSIGN . expression   (rule 55)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 136
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 77

    aff  ->  lvalue RIGHT_ASSIGN . expression   (rule 61)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 137
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 78

    aff  ->  lvalue RIGHT_RIGHT_ASSIGN . expression   (rule 62)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 138
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 79

    aff  ->  lvalue LEFT_ASSIGN . expression   (rule 63)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 139
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 80

    aff  ->  lvalue ADD_ASSIGN . expression   (rule 56)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 140
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 81

    aff  ->  lvalue SUB_ASSIGN . expression   (rule 57)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 141
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 82

    aff  ->  lvalue MUL_ASSIGN . expression   (rule 58)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 142
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 83

    aff  ->  lvalue DIV_ASSIGN . expression   (rule 59)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 143
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 84

    aff  ->  lvalue MOD_ASSIGN . expression   (rule 60)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 144
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 85

    post_pre_command  ->  lvalue INC_OP .   (rule 71)

    $default	reduce using rule 71 (post_pre_command)



state 86

    post_pre_command  ->  lvalue DEC_OP .   (rule 72)

    $default	reduce using rule 72 (post_pre_command)



state 87

    function_call  ->  identifier LEFT_PARENTHESIS . argument_list RIGHT_PARENTHESIS   (rule 48)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    $default	reduce using rule 49 (argument_list)

    function_call	go to state 51
    argument_list	go to state 145
    first_argument_list	go to state 146
    argument	go to state 147
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 148
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 149
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 88

    array_elem  ->  identifier '[' . array_index ']'   (rule 67)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    array_index	go to state 150
    post_pre_command	go to state 55
    expression	go to state 151
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 89

    if_body  ->  IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS command   (rule 33)
    if_body  ->  IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS command ELSE command   (rule 34)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    RIGHT_PARENTHESIS	shift, and go to state 152
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130



state 90

    for_loop  ->  FOR LEFT_PARENTHESIS aff_func . ';' expression ';' aff_func RIGHT_PARENTHESIS command   (rule 39)

    ';' 	shift, and go to state 153



state 91

    aff_func  ->  function_call .   (rule 46)

    $default	reduce using rule 46 (aff_func)



state 92

    aff_func  ->  aff .   (rule 44)

    $default	reduce using rule 44 (aff_func)



state 93

    aff_func  ->  post_pre_command .   (rule 45)

    $default	reduce using rule 45 (aff_func)



state 94

    foreach_loop  ->  FOREACH identifier LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS command   (rule 42)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 154
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 95

    while_loop  ->  WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS command   (rule 40)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    RIGHT_PARENTHESIS	shift, and go to state 155
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130



state 96

    repeat_loop  ->  REPEAT command UNTIL . expression ';'   (rule 41)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 156
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 97

    expression  ->  LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS   (rule 73)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    RIGHT_PARENTHESIS	shift, and go to state 157
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130



state 98

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  NOT expression .   (rule 75)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 75 (expression)]
    NE  	[reduce using rule 75 (expression)]
    LT  	[reduce using rule 75 (expression)]
    GT  	[reduce using rule 75 (expression)]
    LE  	[reduce using rule 75 (expression)]
    GE  	[reduce using rule 75 (expression)]
    SEARCH_SUBSTR	[reduce using rule 75 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 75 (expression)]
    POWER	[reduce using rule 75 (expression)]
    ADD 	[reduce using rule 75 (expression)]
    SUB 	[reduce using rule 75 (expression)]
    MUL 	[reduce using rule 75 (expression)]
    DIV 	[reduce using rule 75 (expression)]
    MOD 	[reduce using rule 75 (expression)]
    XOR 	[reduce using rule 75 (expression)]
    OR  	[reduce using rule 75 (expression)]
    OR_OP	[reduce using rule 75 (expression)]
    RIGHT_OP	[reduce using rule 75 (expression)]
    RIGHT_OP_3	[reduce using rule 75 (expression)]
    LEFT_OP	[reduce using rule 75 (expression)]
    AND_OP	[reduce using rule 75 (expression)]
    AND 	[reduce using rule 75 (expression)]
    NOT_BIT	[reduce using rule 75 (expression)]
    ASSIGN_BIT	[reduce using rule 75 (expression)]
    $default	reduce using rule 75 (expression)



state 99

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  BIT expression .   (rule 79)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 79 (expression)]
    NE  	[reduce using rule 79 (expression)]
    LT  	[reduce using rule 79 (expression)]
    GT  	[reduce using rule 79 (expression)]
    LE  	[reduce using rule 79 (expression)]
    GE  	[reduce using rule 79 (expression)]
    SEARCH_SUBSTR	[reduce using rule 79 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 79 (expression)]
    POWER	[reduce using rule 79 (expression)]
    ADD 	[reduce using rule 79 (expression)]
    SUB 	[reduce using rule 79 (expression)]
    MUL 	[reduce using rule 79 (expression)]
    DIV 	[reduce using rule 79 (expression)]
    MOD 	[reduce using rule 79 (expression)]
    XOR 	[reduce using rule 79 (expression)]
    OR  	[reduce using rule 79 (expression)]
    OR_OP	[reduce using rule 79 (expression)]
    RIGHT_OP	[reduce using rule 79 (expression)]
    RIGHT_OP_3	[reduce using rule 79 (expression)]
    LEFT_OP	[reduce using rule 79 (expression)]
    AND_OP	[reduce using rule 79 (expression)]
    AND 	[reduce using rule 79 (expression)]
    NOT_BIT	[reduce using rule 79 (expression)]
    ASSIGN_BIT	[reduce using rule 79 (expression)]
    $default	reduce using rule 79 (expression)



state 100

    ipaddr  ->  INTEGER '.' . INTEGER '.' INTEGER '.' INTEGER   (rule 118)

    INTEGER	shift, and go to state 158



state 101

    array_data  ->  STR_FIRST . ARROW simple_array_data   (rule 110)
    atom  ->  STR_FIRST .   (rule 112)

    ARROW	shift, and go to state 159

    $default	reduce using rule 112 (atom)



state 102

    atom  ->  INTEGER .   (rule 111)

    $default	reduce using rule 111 (atom)



state 103

    const_array  ->  '[' list_array_data . ']'   (rule 106)

    ']' 	shift, and go to state 160



state 104

    list_array_data  ->  array_data .   (rule 107)
    list_array_data  ->  array_data . ',' list_array_data   (rule 108)

    ',' 	shift, and go to state 161

    $default	reduce using rule 107 (list_array_data)



state 105

    simple_array_data  ->  atom .   (rule 113)

    $default	reduce using rule 113 (simple_array_data)



state 106

    array_data  ->  simple_array_data .   (rule 109)

    $default	reduce using rule 109 (array_data)



state 107

    expression  ->  expression EQ . expression   (rule 92)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 162
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 108

    expression  ->  expression NE . expression   (rule 91)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 163
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 109

    expression  ->  expression LT . expression   (rule 93)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 164
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 110

    expression  ->  expression GT . expression   (rule 94)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 165
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 111

    expression  ->  expression LE . expression   (rule 95)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 166
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 112

    expression  ->  expression GE . expression   (rule 96)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 167
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 113

    expression  ->  expression SEARCH_SUBSTR . expression   (rule 99)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 168
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 114

    expression  ->  expression NOT_SEARCH_SUBSTR . expression   (rule 100)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 169
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 115

    expression  ->  expression POWER . expression   (rule 90)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 170
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 116

    expression  ->  expression ADD . expression   (rule 77)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 171
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 117

    expression  ->  expression SUB . expression   (rule 78)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 172
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 118

    expression  ->  expression MUL . expression   (rule 89)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 173
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 119

    expression  ->  expression DIV . expression   (rule 80)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 174
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 120

    expression  ->  expression MOD . expression   (rule 81)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 175
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 121

    expression  ->  expression XOR . expression   (rule 83)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 176
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 122

    expression  ->  expression OR . expression   (rule 84)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 177
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 123

    expression  ->  expression OR_OP . expression   (rule 76)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 178
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 124

    expression  ->  expression RIGHT_OP . expression   (rule 85)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 179
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 125

    expression  ->  expression RIGHT_OP_3 . expression   (rule 86)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 180
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 126

    expression  ->  expression LEFT_OP . expression   (rule 87)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 181
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 127

    expression  ->  expression AND_OP . expression   (rule 74)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 182
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 128

    expression  ->  expression AND . expression   (rule 82)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 183
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 129

    expression  ->  expression NOT_BIT . expression   (rule 98)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 184
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 130

    expression  ->  expression ASSIGN_BIT . expression   (rule 97)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 185
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 131

    inc  ->  INCLUDE LEFT_PARENTHESIS STR_FIRST . RIGHT_PARENTHESIS   (rule 47)

    RIGHT_PARENTHESIS	shift, and go to state 186



state 132

    function_declaration  ->  FUNCTION LEFT_PARENTHESIS argument_declaration . RIGHT_PARENTHESIS body   (rule 7)

    RIGHT_PARENTHESIS	shift, and go to state 187



state 133

    body  ->  LEFT_BRACE command_list RIGHT_BRACE .   (rule 12)

    $default	reduce using rule 12 (body)



state 134

    command_list  ->  command_list command .   (rule 15)

    $default	reduce using rule 15 (command_list)



state 135

    first_argument_declaration  ->  identifier ',' . first_argument_declaration   (rule 11)

    IDENTIFIER	shift, and go to state 14

    first_argument_declaration	go to state 188
    identifier	go to state 72



state 136

    aff  ->  lvalue ASSIGN expression .   (rule 55)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 55 (aff)]
    NE  	[reduce using rule 55 (aff)]
    LT  	[reduce using rule 55 (aff)]
    GT  	[reduce using rule 55 (aff)]
    LE  	[reduce using rule 55 (aff)]
    GE  	[reduce using rule 55 (aff)]
    SEARCH_SUBSTR	[reduce using rule 55 (aff)]
    NOT_SEARCH_SUBSTR	[reduce using rule 55 (aff)]
    POWER	[reduce using rule 55 (aff)]
    ADD 	[reduce using rule 55 (aff)]
    SUB 	[reduce using rule 55 (aff)]
    MUL 	[reduce using rule 55 (aff)]
    DIV 	[reduce using rule 55 (aff)]
    MOD 	[reduce using rule 55 (aff)]
    XOR 	[reduce using rule 55 (aff)]
    OR  	[reduce using rule 55 (aff)]
    OR_OP	[reduce using rule 55 (aff)]
    RIGHT_OP	[reduce using rule 55 (aff)]
    RIGHT_OP_3	[reduce using rule 55 (aff)]
    LEFT_OP	[reduce using rule 55 (aff)]
    AND_OP	[reduce using rule 55 (aff)]
    AND 	[reduce using rule 55 (aff)]
    NOT_BIT	[reduce using rule 55 (aff)]
    ASSIGN_BIT	[reduce using rule 55 (aff)]
    $default	reduce using rule 55 (aff)



state 137

    aff  ->  lvalue RIGHT_ASSIGN expression .   (rule 61)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 61 (aff)]
    NE  	[reduce using rule 61 (aff)]
    LT  	[reduce using rule 61 (aff)]
    GT  	[reduce using rule 61 (aff)]
    LE  	[reduce using rule 61 (aff)]
    GE  	[reduce using rule 61 (aff)]
    SEARCH_SUBSTR	[reduce using rule 61 (aff)]
    NOT_SEARCH_SUBSTR	[reduce using rule 61 (aff)]
    POWER	[reduce using rule 61 (aff)]
    ADD 	[reduce using rule 61 (aff)]
    SUB 	[reduce using rule 61 (aff)]
    MUL 	[reduce using rule 61 (aff)]
    DIV 	[reduce using rule 61 (aff)]
    MOD 	[reduce using rule 61 (aff)]
    XOR 	[reduce using rule 61 (aff)]
    OR  	[reduce using rule 61 (aff)]
    OR_OP	[reduce using rule 61 (aff)]
    RIGHT_OP	[reduce using rule 61 (aff)]
    RIGHT_OP_3	[reduce using rule 61 (aff)]
    LEFT_OP	[reduce using rule 61 (aff)]
    AND_OP	[reduce using rule 61 (aff)]
    AND 	[reduce using rule 61 (aff)]
    NOT_BIT	[reduce using rule 61 (aff)]
    ASSIGN_BIT	[reduce using rule 61 (aff)]
    $default	reduce using rule 61 (aff)



state 138

    aff  ->  lvalue RIGHT_RIGHT_ASSIGN expression .   (rule 62)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 62 (aff)]
    NE  	[reduce using rule 62 (aff)]
    LT  	[reduce using rule 62 (aff)]
    GT  	[reduce using rule 62 (aff)]
    LE  	[reduce using rule 62 (aff)]
    GE  	[reduce using rule 62 (aff)]
    SEARCH_SUBSTR	[reduce using rule 62 (aff)]
    NOT_SEARCH_SUBSTR	[reduce using rule 62 (aff)]
    POWER	[reduce using rule 62 (aff)]
    ADD 	[reduce using rule 62 (aff)]
    SUB 	[reduce using rule 62 (aff)]
    MUL 	[reduce using rule 62 (aff)]
    DIV 	[reduce using rule 62 (aff)]
    MOD 	[reduce using rule 62 (aff)]
    XOR 	[reduce using rule 62 (aff)]
    OR  	[reduce using rule 62 (aff)]
    OR_OP	[reduce using rule 62 (aff)]
    RIGHT_OP	[reduce using rule 62 (aff)]
    RIGHT_OP_3	[reduce using rule 62 (aff)]
    LEFT_OP	[reduce using rule 62 (aff)]
    AND_OP	[reduce using rule 62 (aff)]
    AND 	[reduce using rule 62 (aff)]
    NOT_BIT	[reduce using rule 62 (aff)]
    ASSIGN_BIT	[reduce using rule 62 (aff)]
    $default	reduce using rule 62 (aff)



state 139

    aff  ->  lvalue LEFT_ASSIGN expression .   (rule 63)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 63 (aff)]
    NE  	[reduce using rule 63 (aff)]
    LT  	[reduce using rule 63 (aff)]
    GT  	[reduce using rule 63 (aff)]
    LE  	[reduce using rule 63 (aff)]
    GE  	[reduce using rule 63 (aff)]
    SEARCH_SUBSTR	[reduce using rule 63 (aff)]
    NOT_SEARCH_SUBSTR	[reduce using rule 63 (aff)]
    POWER	[reduce using rule 63 (aff)]
    ADD 	[reduce using rule 63 (aff)]
    SUB 	[reduce using rule 63 (aff)]
    MUL 	[reduce using rule 63 (aff)]
    DIV 	[reduce using rule 63 (aff)]
    MOD 	[reduce using rule 63 (aff)]
    XOR 	[reduce using rule 63 (aff)]
    OR  	[reduce using rule 63 (aff)]
    OR_OP	[reduce using rule 63 (aff)]
    RIGHT_OP	[reduce using rule 63 (aff)]
    RIGHT_OP_3	[reduce using rule 63 (aff)]
    LEFT_OP	[reduce using rule 63 (aff)]
    AND_OP	[reduce using rule 63 (aff)]
    AND 	[reduce using rule 63 (aff)]
    NOT_BIT	[reduce using rule 63 (aff)]
    ASSIGN_BIT	[reduce using rule 63 (aff)]
    $default	reduce using rule 63 (aff)



state 140

    aff  ->  lvalue ADD_ASSIGN expression .   (rule 56)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 56 (aff)]
    NE  	[reduce using rule 56 (aff)]
    LT  	[reduce using rule 56 (aff)]
    GT  	[reduce using rule 56 (aff)]
    LE  	[reduce using rule 56 (aff)]
    GE  	[reduce using rule 56 (aff)]
    SEARCH_SUBSTR	[reduce using rule 56 (aff)]
    NOT_SEARCH_SUBSTR	[reduce using rule 56 (aff)]
    POWER	[reduce using rule 56 (aff)]
    ADD 	[reduce using rule 56 (aff)]
    SUB 	[reduce using rule 56 (aff)]
    MUL 	[reduce using rule 56 (aff)]
    DIV 	[reduce using rule 56 (aff)]
    MOD 	[reduce using rule 56 (aff)]
    XOR 	[reduce using rule 56 (aff)]
    OR  	[reduce using rule 56 (aff)]
    OR_OP	[reduce using rule 56 (aff)]
    RIGHT_OP	[reduce using rule 56 (aff)]
    RIGHT_OP_3	[reduce using rule 56 (aff)]
    LEFT_OP	[reduce using rule 56 (aff)]
    AND_OP	[reduce using rule 56 (aff)]
    AND 	[reduce using rule 56 (aff)]
    NOT_BIT	[reduce using rule 56 (aff)]
    ASSIGN_BIT	[reduce using rule 56 (aff)]
    $default	reduce using rule 56 (aff)



state 141

    aff  ->  lvalue SUB_ASSIGN expression .   (rule 57)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 57 (aff)]
    NE  	[reduce using rule 57 (aff)]
    LT  	[reduce using rule 57 (aff)]
    GT  	[reduce using rule 57 (aff)]
    LE  	[reduce using rule 57 (aff)]
    GE  	[reduce using rule 57 (aff)]
    SEARCH_SUBSTR	[reduce using rule 57 (aff)]
    NOT_SEARCH_SUBSTR	[reduce using rule 57 (aff)]
    POWER	[reduce using rule 57 (aff)]
    ADD 	[reduce using rule 57 (aff)]
    SUB 	[reduce using rule 57 (aff)]
    MUL 	[reduce using rule 57 (aff)]
    DIV 	[reduce using rule 57 (aff)]
    MOD 	[reduce using rule 57 (aff)]
    XOR 	[reduce using rule 57 (aff)]
    OR  	[reduce using rule 57 (aff)]
    OR_OP	[reduce using rule 57 (aff)]
    RIGHT_OP	[reduce using rule 57 (aff)]
    RIGHT_OP_3	[reduce using rule 57 (aff)]
    LEFT_OP	[reduce using rule 57 (aff)]
    AND_OP	[reduce using rule 57 (aff)]
    AND 	[reduce using rule 57 (aff)]
    NOT_BIT	[reduce using rule 57 (aff)]
    ASSIGN_BIT	[reduce using rule 57 (aff)]
    $default	reduce using rule 57 (aff)



state 142

    aff  ->  lvalue MUL_ASSIGN expression .   (rule 58)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 58 (aff)]
    NE  	[reduce using rule 58 (aff)]
    LT  	[reduce using rule 58 (aff)]
    GT  	[reduce using rule 58 (aff)]
    LE  	[reduce using rule 58 (aff)]
    GE  	[reduce using rule 58 (aff)]
    SEARCH_SUBSTR	[reduce using rule 58 (aff)]
    NOT_SEARCH_SUBSTR	[reduce using rule 58 (aff)]
    POWER	[reduce using rule 58 (aff)]
    ADD 	[reduce using rule 58 (aff)]
    SUB 	[reduce using rule 58 (aff)]
    MUL 	[reduce using rule 58 (aff)]
    DIV 	[reduce using rule 58 (aff)]
    MOD 	[reduce using rule 58 (aff)]
    XOR 	[reduce using rule 58 (aff)]
    OR  	[reduce using rule 58 (aff)]
    OR_OP	[reduce using rule 58 (aff)]
    RIGHT_OP	[reduce using rule 58 (aff)]
    RIGHT_OP_3	[reduce using rule 58 (aff)]
    LEFT_OP	[reduce using rule 58 (aff)]
    AND_OP	[reduce using rule 58 (aff)]
    AND 	[reduce using rule 58 (aff)]
    NOT_BIT	[reduce using rule 58 (aff)]
    ASSIGN_BIT	[reduce using rule 58 (aff)]
    $default	reduce using rule 58 (aff)



state 143

    aff  ->  lvalue DIV_ASSIGN expression .   (rule 59)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 59 (aff)]
    NE  	[reduce using rule 59 (aff)]
    LT  	[reduce using rule 59 (aff)]
    GT  	[reduce using rule 59 (aff)]
    LE  	[reduce using rule 59 (aff)]
    GE  	[reduce using rule 59 (aff)]
    SEARCH_SUBSTR	[reduce using rule 59 (aff)]
    NOT_SEARCH_SUBSTR	[reduce using rule 59 (aff)]
    POWER	[reduce using rule 59 (aff)]
    ADD 	[reduce using rule 59 (aff)]
    SUB 	[reduce using rule 59 (aff)]
    MUL 	[reduce using rule 59 (aff)]
    DIV 	[reduce using rule 59 (aff)]
    MOD 	[reduce using rule 59 (aff)]
    XOR 	[reduce using rule 59 (aff)]
    OR  	[reduce using rule 59 (aff)]
    OR_OP	[reduce using rule 59 (aff)]
    RIGHT_OP	[reduce using rule 59 (aff)]
    RIGHT_OP_3	[reduce using rule 59 (aff)]
    LEFT_OP	[reduce using rule 59 (aff)]
    AND_OP	[reduce using rule 59 (aff)]
    AND 	[reduce using rule 59 (aff)]
    NOT_BIT	[reduce using rule 59 (aff)]
    ASSIGN_BIT	[reduce using rule 59 (aff)]
    $default	reduce using rule 59 (aff)



state 144

    aff  ->  lvalue MOD_ASSIGN expression .   (rule 60)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 60 (aff)]
    NE  	[reduce using rule 60 (aff)]
    LT  	[reduce using rule 60 (aff)]
    GT  	[reduce using rule 60 (aff)]
    LE  	[reduce using rule 60 (aff)]
    GE  	[reduce using rule 60 (aff)]
    SEARCH_SUBSTR	[reduce using rule 60 (aff)]
    NOT_SEARCH_SUBSTR	[reduce using rule 60 (aff)]
    POWER	[reduce using rule 60 (aff)]
    ADD 	[reduce using rule 60 (aff)]
    SUB 	[reduce using rule 60 (aff)]
    MUL 	[reduce using rule 60 (aff)]
    DIV 	[reduce using rule 60 (aff)]
    MOD 	[reduce using rule 60 (aff)]
    XOR 	[reduce using rule 60 (aff)]
    OR  	[reduce using rule 60 (aff)]
    OR_OP	[reduce using rule 60 (aff)]
    RIGHT_OP	[reduce using rule 60 (aff)]
    RIGHT_OP_3	[reduce using rule 60 (aff)]
    LEFT_OP	[reduce using rule 60 (aff)]
    AND_OP	[reduce using rule 60 (aff)]
    AND 	[reduce using rule 60 (aff)]
    NOT_BIT	[reduce using rule 60 (aff)]
    ASSIGN_BIT	[reduce using rule 60 (aff)]
    $default	reduce using rule 60 (aff)



state 145

    function_call  ->  identifier LEFT_PARENTHESIS argument_list . RIGHT_PARENTHESIS   (rule 48)

    RIGHT_PARENTHESIS	shift, and go to state 189



state 146

    argument_list  ->  first_argument_list .   (rule 50)
    first_argument_list  ->  first_argument_list . ',' argument   (rule 52)

    ',' 	shift, and go to state 190

    $default	reduce using rule 50 (argument_list)



state 147

    first_argument_list  ->  argument .   (rule 51)

    $default	reduce using rule 51 (first_argument_list)



state 148

    function_call  ->  identifier . LEFT_PARENTHESIS argument_list RIGHT_PARENTHESIS   (rule 48)
    argument  ->  identifier . ':' expression   (rule 54)
    lvalue  ->  identifier .   (rule 64)
    array_elem  ->  identifier . '[' array_index ']'   (rule 67)
    var_name  ->  identifier .   (rule 117)

    LEFT_PARENTHESIS	shift, and go to state 87
    ':' 	shift, and go to state 191
    '[' 	shift, and go to state 88

    ASSIGN	reduce using rule 64 (lvalue)
    RIGHT_ASSIGN	reduce using rule 64 (lvalue)
    RIGHT_RIGHT_ASSIGN	reduce using rule 64 (lvalue)
    LEFT_ASSIGN	reduce using rule 64 (lvalue)
    ADD_ASSIGN	reduce using rule 64 (lvalue)
    SUB_ASSIGN	reduce using rule 64 (lvalue)
    MUL_ASSIGN	reduce using rule 64 (lvalue)
    DIV_ASSIGN	reduce using rule 64 (lvalue)
    MOD_ASSIGN	reduce using rule 64 (lvalue)
    INC_OP	reduce using rule 64 (lvalue)
    DEC_OP	reduce using rule 64 (lvalue)
    $default	reduce using rule 117 (var_name)



state 149

    argument  ->  expression .   (rule 53)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    $default	reduce using rule 53 (argument)



state 150

    array_elem  ->  identifier '[' array_index . ']'   (rule 67)

    ']' 	shift, and go to state 192



state 151

    array_index  ->  expression .   (rule 68)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    $default	reduce using rule 68 (array_index)



state 152

    if_body  ->  IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . command   (rule 33)
    if_body  ->  IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . command ELSE command   (rule 34)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    $default	reduce using rule 21 (simple_command)

    body	go to state 21
    command	go to state 193
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 153

    for_loop  ->  FOR LEFT_PARENTHESIS aff_func ';' . expression ';' aff_func RIGHT_PARENTHESIS command   (rule 39)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 194
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 154

    foreach_loop  ->  FOREACH identifier LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS command   (rule 42)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    RIGHT_PARENTHESIS	shift, and go to state 195
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130



state 155

    while_loop  ->  WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . command   (rule 40)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    $default	reduce using rule 21 (simple_command)

    body	go to state 21
    command	go to state 196
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 156

    repeat_loop  ->  REPEAT command UNTIL expression . ';'   (rule 41)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130
    ';' 	shift, and go to state 197



state 157

    expression  ->  LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .   (rule 73)

    $default	reduce using rule 73 (expression)



state 158

    ipaddr  ->  INTEGER '.' INTEGER . '.' INTEGER '.' INTEGER   (rule 118)

    '.' 	shift, and go to state 198



state 159

    array_data  ->  STR_FIRST ARROW . simple_array_data   (rule 110)

    STR_FIRST	shift, and go to state 45
    INTEGER	shift, and go to state 102

    atom	go to state 105
    simple_array_data	go to state 199



state 160

    const_array  ->  '[' list_array_data ']' .   (rule 106)

    $default	reduce using rule 106 (const_array)



state 161

    list_array_data  ->  array_data ',' . list_array_data   (rule 108)

    STR_FIRST	shift, and go to state 101
    INTEGER	shift, and go to state 102

    list_array_data	go to state 200
    array_data	go to state 104
    atom	go to state 105
    simple_array_data	go to state 106



state 162

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression EQ expression .   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 92 (expression)]
    NE  	[reduce using rule 92 (expression)]
    LT  	[reduce using rule 92 (expression)]
    GT  	[reduce using rule 92 (expression)]
    LE  	[reduce using rule 92 (expression)]
    GE  	[reduce using rule 92 (expression)]
    SEARCH_SUBSTR	[reduce using rule 92 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 92 (expression)]
    POWER	[reduce using rule 92 (expression)]
    ADD 	[reduce using rule 92 (expression)]
    SUB 	[reduce using rule 92 (expression)]
    MUL 	[reduce using rule 92 (expression)]
    DIV 	[reduce using rule 92 (expression)]
    MOD 	[reduce using rule 92 (expression)]
    XOR 	[reduce using rule 92 (expression)]
    OR  	[reduce using rule 92 (expression)]
    OR_OP	[reduce using rule 92 (expression)]
    RIGHT_OP	[reduce using rule 92 (expression)]
    RIGHT_OP_3	[reduce using rule 92 (expression)]
    LEFT_OP	[reduce using rule 92 (expression)]
    AND_OP	[reduce using rule 92 (expression)]
    AND 	[reduce using rule 92 (expression)]
    NOT_BIT	[reduce using rule 92 (expression)]
    ASSIGN_BIT	[reduce using rule 92 (expression)]
    $default	reduce using rule 92 (expression)



state 163

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression NE expression .   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 91 (expression)]
    NE  	[reduce using rule 91 (expression)]
    LT  	[reduce using rule 91 (expression)]
    GT  	[reduce using rule 91 (expression)]
    LE  	[reduce using rule 91 (expression)]
    GE  	[reduce using rule 91 (expression)]
    SEARCH_SUBSTR	[reduce using rule 91 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 91 (expression)]
    POWER	[reduce using rule 91 (expression)]
    ADD 	[reduce using rule 91 (expression)]
    SUB 	[reduce using rule 91 (expression)]
    MUL 	[reduce using rule 91 (expression)]
    DIV 	[reduce using rule 91 (expression)]
    MOD 	[reduce using rule 91 (expression)]
    XOR 	[reduce using rule 91 (expression)]
    OR  	[reduce using rule 91 (expression)]
    OR_OP	[reduce using rule 91 (expression)]
    RIGHT_OP	[reduce using rule 91 (expression)]
    RIGHT_OP_3	[reduce using rule 91 (expression)]
    LEFT_OP	[reduce using rule 91 (expression)]
    AND_OP	[reduce using rule 91 (expression)]
    AND 	[reduce using rule 91 (expression)]
    NOT_BIT	[reduce using rule 91 (expression)]
    ASSIGN_BIT	[reduce using rule 91 (expression)]
    $default	reduce using rule 91 (expression)



state 164

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression LT expression .   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 93 (expression)]
    NE  	[reduce using rule 93 (expression)]
    LT  	[reduce using rule 93 (expression)]
    GT  	[reduce using rule 93 (expression)]
    LE  	[reduce using rule 93 (expression)]
    GE  	[reduce using rule 93 (expression)]
    SEARCH_SUBSTR	[reduce using rule 93 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 93 (expression)]
    POWER	[reduce using rule 93 (expression)]
    ADD 	[reduce using rule 93 (expression)]
    SUB 	[reduce using rule 93 (expression)]
    MUL 	[reduce using rule 93 (expression)]
    DIV 	[reduce using rule 93 (expression)]
    MOD 	[reduce using rule 93 (expression)]
    XOR 	[reduce using rule 93 (expression)]
    OR  	[reduce using rule 93 (expression)]
    OR_OP	[reduce using rule 93 (expression)]
    RIGHT_OP	[reduce using rule 93 (expression)]
    RIGHT_OP_3	[reduce using rule 93 (expression)]
    LEFT_OP	[reduce using rule 93 (expression)]
    AND_OP	[reduce using rule 93 (expression)]
    AND 	[reduce using rule 93 (expression)]
    NOT_BIT	[reduce using rule 93 (expression)]
    ASSIGN_BIT	[reduce using rule 93 (expression)]
    $default	reduce using rule 93 (expression)



state 165

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression GT expression .   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 94 (expression)]
    NE  	[reduce using rule 94 (expression)]
    LT  	[reduce using rule 94 (expression)]
    GT  	[reduce using rule 94 (expression)]
    LE  	[reduce using rule 94 (expression)]
    GE  	[reduce using rule 94 (expression)]
    SEARCH_SUBSTR	[reduce using rule 94 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 94 (expression)]
    POWER	[reduce using rule 94 (expression)]
    ADD 	[reduce using rule 94 (expression)]
    SUB 	[reduce using rule 94 (expression)]
    MUL 	[reduce using rule 94 (expression)]
    DIV 	[reduce using rule 94 (expression)]
    MOD 	[reduce using rule 94 (expression)]
    XOR 	[reduce using rule 94 (expression)]
    OR  	[reduce using rule 94 (expression)]
    OR_OP	[reduce using rule 94 (expression)]
    RIGHT_OP	[reduce using rule 94 (expression)]
    RIGHT_OP_3	[reduce using rule 94 (expression)]
    LEFT_OP	[reduce using rule 94 (expression)]
    AND_OP	[reduce using rule 94 (expression)]
    AND 	[reduce using rule 94 (expression)]
    NOT_BIT	[reduce using rule 94 (expression)]
    ASSIGN_BIT	[reduce using rule 94 (expression)]
    $default	reduce using rule 94 (expression)



state 166

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression LE expression .   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 95 (expression)]
    NE  	[reduce using rule 95 (expression)]
    LT  	[reduce using rule 95 (expression)]
    GT  	[reduce using rule 95 (expression)]
    LE  	[reduce using rule 95 (expression)]
    GE  	[reduce using rule 95 (expression)]
    SEARCH_SUBSTR	[reduce using rule 95 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 95 (expression)]
    POWER	[reduce using rule 95 (expression)]
    ADD 	[reduce using rule 95 (expression)]
    SUB 	[reduce using rule 95 (expression)]
    MUL 	[reduce using rule 95 (expression)]
    DIV 	[reduce using rule 95 (expression)]
    MOD 	[reduce using rule 95 (expression)]
    XOR 	[reduce using rule 95 (expression)]
    OR  	[reduce using rule 95 (expression)]
    OR_OP	[reduce using rule 95 (expression)]
    RIGHT_OP	[reduce using rule 95 (expression)]
    RIGHT_OP_3	[reduce using rule 95 (expression)]
    LEFT_OP	[reduce using rule 95 (expression)]
    AND_OP	[reduce using rule 95 (expression)]
    AND 	[reduce using rule 95 (expression)]
    NOT_BIT	[reduce using rule 95 (expression)]
    ASSIGN_BIT	[reduce using rule 95 (expression)]
    $default	reduce using rule 95 (expression)



state 167

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression GE expression .   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 96 (expression)]
    NE  	[reduce using rule 96 (expression)]
    LT  	[reduce using rule 96 (expression)]
    GT  	[reduce using rule 96 (expression)]
    LE  	[reduce using rule 96 (expression)]
    GE  	[reduce using rule 96 (expression)]
    SEARCH_SUBSTR	[reduce using rule 96 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 96 (expression)]
    POWER	[reduce using rule 96 (expression)]
    ADD 	[reduce using rule 96 (expression)]
    SUB 	[reduce using rule 96 (expression)]
    MUL 	[reduce using rule 96 (expression)]
    DIV 	[reduce using rule 96 (expression)]
    MOD 	[reduce using rule 96 (expression)]
    XOR 	[reduce using rule 96 (expression)]
    OR  	[reduce using rule 96 (expression)]
    OR_OP	[reduce using rule 96 (expression)]
    RIGHT_OP	[reduce using rule 96 (expression)]
    RIGHT_OP_3	[reduce using rule 96 (expression)]
    LEFT_OP	[reduce using rule 96 (expression)]
    AND_OP	[reduce using rule 96 (expression)]
    AND 	[reduce using rule 96 (expression)]
    NOT_BIT	[reduce using rule 96 (expression)]
    ASSIGN_BIT	[reduce using rule 96 (expression)]
    $default	reduce using rule 96 (expression)



state 168

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression SEARCH_SUBSTR expression .   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 99 (expression)]
    NE  	[reduce using rule 99 (expression)]
    LT  	[reduce using rule 99 (expression)]
    GT  	[reduce using rule 99 (expression)]
    LE  	[reduce using rule 99 (expression)]
    GE  	[reduce using rule 99 (expression)]
    SEARCH_SUBSTR	[reduce using rule 99 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 99 (expression)]
    POWER	[reduce using rule 99 (expression)]
    ADD 	[reduce using rule 99 (expression)]
    SUB 	[reduce using rule 99 (expression)]
    MUL 	[reduce using rule 99 (expression)]
    DIV 	[reduce using rule 99 (expression)]
    MOD 	[reduce using rule 99 (expression)]
    XOR 	[reduce using rule 99 (expression)]
    OR  	[reduce using rule 99 (expression)]
    OR_OP	[reduce using rule 99 (expression)]
    RIGHT_OP	[reduce using rule 99 (expression)]
    RIGHT_OP_3	[reduce using rule 99 (expression)]
    LEFT_OP	[reduce using rule 99 (expression)]
    AND_OP	[reduce using rule 99 (expression)]
    AND 	[reduce using rule 99 (expression)]
    NOT_BIT	[reduce using rule 99 (expression)]
    ASSIGN_BIT	[reduce using rule 99 (expression)]
    $default	reduce using rule 99 (expression)



state 169

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)
    expression  ->  expression NOT_SEARCH_SUBSTR expression .   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 100 (expression)]
    NE  	[reduce using rule 100 (expression)]
    LT  	[reduce using rule 100 (expression)]
    GT  	[reduce using rule 100 (expression)]
    LE  	[reduce using rule 100 (expression)]
    GE  	[reduce using rule 100 (expression)]
    SEARCH_SUBSTR	[reduce using rule 100 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 100 (expression)]
    POWER	[reduce using rule 100 (expression)]
    ADD 	[reduce using rule 100 (expression)]
    SUB 	[reduce using rule 100 (expression)]
    MUL 	[reduce using rule 100 (expression)]
    DIV 	[reduce using rule 100 (expression)]
    MOD 	[reduce using rule 100 (expression)]
    XOR 	[reduce using rule 100 (expression)]
    OR  	[reduce using rule 100 (expression)]
    OR_OP	[reduce using rule 100 (expression)]
    RIGHT_OP	[reduce using rule 100 (expression)]
    RIGHT_OP_3	[reduce using rule 100 (expression)]
    LEFT_OP	[reduce using rule 100 (expression)]
    AND_OP	[reduce using rule 100 (expression)]
    AND 	[reduce using rule 100 (expression)]
    NOT_BIT	[reduce using rule 100 (expression)]
    ASSIGN_BIT	[reduce using rule 100 (expression)]
    $default	reduce using rule 100 (expression)



state 170

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression POWER expression .   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 90 (expression)]
    NE  	[reduce using rule 90 (expression)]
    LT  	[reduce using rule 90 (expression)]
    GT  	[reduce using rule 90 (expression)]
    LE  	[reduce using rule 90 (expression)]
    GE  	[reduce using rule 90 (expression)]
    SEARCH_SUBSTR	[reduce using rule 90 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 90 (expression)]
    POWER	[reduce using rule 90 (expression)]
    ADD 	[reduce using rule 90 (expression)]
    SUB 	[reduce using rule 90 (expression)]
    MUL 	[reduce using rule 90 (expression)]
    DIV 	[reduce using rule 90 (expression)]
    MOD 	[reduce using rule 90 (expression)]
    XOR 	[reduce using rule 90 (expression)]
    OR  	[reduce using rule 90 (expression)]
    OR_OP	[reduce using rule 90 (expression)]
    RIGHT_OP	[reduce using rule 90 (expression)]
    RIGHT_OP_3	[reduce using rule 90 (expression)]
    LEFT_OP	[reduce using rule 90 (expression)]
    AND_OP	[reduce using rule 90 (expression)]
    AND 	[reduce using rule 90 (expression)]
    NOT_BIT	[reduce using rule 90 (expression)]
    ASSIGN_BIT	[reduce using rule 90 (expression)]
    $default	reduce using rule 90 (expression)



state 171

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression ADD expression .   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 77 (expression)]
    NE  	[reduce using rule 77 (expression)]
    LT  	[reduce using rule 77 (expression)]
    GT  	[reduce using rule 77 (expression)]
    LE  	[reduce using rule 77 (expression)]
    GE  	[reduce using rule 77 (expression)]
    SEARCH_SUBSTR	[reduce using rule 77 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 77 (expression)]
    POWER	[reduce using rule 77 (expression)]
    ADD 	[reduce using rule 77 (expression)]
    SUB 	[reduce using rule 77 (expression)]
    MUL 	[reduce using rule 77 (expression)]
    DIV 	[reduce using rule 77 (expression)]
    MOD 	[reduce using rule 77 (expression)]
    XOR 	[reduce using rule 77 (expression)]
    OR  	[reduce using rule 77 (expression)]
    OR_OP	[reduce using rule 77 (expression)]
    RIGHT_OP	[reduce using rule 77 (expression)]
    RIGHT_OP_3	[reduce using rule 77 (expression)]
    LEFT_OP	[reduce using rule 77 (expression)]
    AND_OP	[reduce using rule 77 (expression)]
    AND 	[reduce using rule 77 (expression)]
    NOT_BIT	[reduce using rule 77 (expression)]
    ASSIGN_BIT	[reduce using rule 77 (expression)]
    $default	reduce using rule 77 (expression)



state 172

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression SUB expression .   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 78 (expression)]
    NE  	[reduce using rule 78 (expression)]
    LT  	[reduce using rule 78 (expression)]
    GT  	[reduce using rule 78 (expression)]
    LE  	[reduce using rule 78 (expression)]
    GE  	[reduce using rule 78 (expression)]
    SEARCH_SUBSTR	[reduce using rule 78 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 78 (expression)]
    POWER	[reduce using rule 78 (expression)]
    ADD 	[reduce using rule 78 (expression)]
    SUB 	[reduce using rule 78 (expression)]
    MUL 	[reduce using rule 78 (expression)]
    DIV 	[reduce using rule 78 (expression)]
    MOD 	[reduce using rule 78 (expression)]
    XOR 	[reduce using rule 78 (expression)]
    OR  	[reduce using rule 78 (expression)]
    OR_OP	[reduce using rule 78 (expression)]
    RIGHT_OP	[reduce using rule 78 (expression)]
    RIGHT_OP_3	[reduce using rule 78 (expression)]
    LEFT_OP	[reduce using rule 78 (expression)]
    AND_OP	[reduce using rule 78 (expression)]
    AND 	[reduce using rule 78 (expression)]
    NOT_BIT	[reduce using rule 78 (expression)]
    ASSIGN_BIT	[reduce using rule 78 (expression)]
    $default	reduce using rule 78 (expression)



state 173

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression MUL expression .   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 89 (expression)]
    NE  	[reduce using rule 89 (expression)]
    LT  	[reduce using rule 89 (expression)]
    GT  	[reduce using rule 89 (expression)]
    LE  	[reduce using rule 89 (expression)]
    GE  	[reduce using rule 89 (expression)]
    SEARCH_SUBSTR	[reduce using rule 89 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 89 (expression)]
    POWER	[reduce using rule 89 (expression)]
    ADD 	[reduce using rule 89 (expression)]
    SUB 	[reduce using rule 89 (expression)]
    MUL 	[reduce using rule 89 (expression)]
    DIV 	[reduce using rule 89 (expression)]
    MOD 	[reduce using rule 89 (expression)]
    XOR 	[reduce using rule 89 (expression)]
    OR  	[reduce using rule 89 (expression)]
    OR_OP	[reduce using rule 89 (expression)]
    RIGHT_OP	[reduce using rule 89 (expression)]
    RIGHT_OP_3	[reduce using rule 89 (expression)]
    LEFT_OP	[reduce using rule 89 (expression)]
    AND_OP	[reduce using rule 89 (expression)]
    AND 	[reduce using rule 89 (expression)]
    NOT_BIT	[reduce using rule 89 (expression)]
    ASSIGN_BIT	[reduce using rule 89 (expression)]
    $default	reduce using rule 89 (expression)



state 174

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression DIV expression .   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 80 (expression)]
    NE  	[reduce using rule 80 (expression)]
    LT  	[reduce using rule 80 (expression)]
    GT  	[reduce using rule 80 (expression)]
    LE  	[reduce using rule 80 (expression)]
    GE  	[reduce using rule 80 (expression)]
    SEARCH_SUBSTR	[reduce using rule 80 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 80 (expression)]
    POWER	[reduce using rule 80 (expression)]
    ADD 	[reduce using rule 80 (expression)]
    SUB 	[reduce using rule 80 (expression)]
    MUL 	[reduce using rule 80 (expression)]
    DIV 	[reduce using rule 80 (expression)]
    MOD 	[reduce using rule 80 (expression)]
    XOR 	[reduce using rule 80 (expression)]
    OR  	[reduce using rule 80 (expression)]
    OR_OP	[reduce using rule 80 (expression)]
    RIGHT_OP	[reduce using rule 80 (expression)]
    RIGHT_OP_3	[reduce using rule 80 (expression)]
    LEFT_OP	[reduce using rule 80 (expression)]
    AND_OP	[reduce using rule 80 (expression)]
    AND 	[reduce using rule 80 (expression)]
    NOT_BIT	[reduce using rule 80 (expression)]
    ASSIGN_BIT	[reduce using rule 80 (expression)]
    $default	reduce using rule 80 (expression)



state 175

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression MOD expression .   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 81 (expression)]
    NE  	[reduce using rule 81 (expression)]
    LT  	[reduce using rule 81 (expression)]
    GT  	[reduce using rule 81 (expression)]
    LE  	[reduce using rule 81 (expression)]
    GE  	[reduce using rule 81 (expression)]
    SEARCH_SUBSTR	[reduce using rule 81 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 81 (expression)]
    POWER	[reduce using rule 81 (expression)]
    ADD 	[reduce using rule 81 (expression)]
    SUB 	[reduce using rule 81 (expression)]
    MUL 	[reduce using rule 81 (expression)]
    DIV 	[reduce using rule 81 (expression)]
    MOD 	[reduce using rule 81 (expression)]
    XOR 	[reduce using rule 81 (expression)]
    OR  	[reduce using rule 81 (expression)]
    OR_OP	[reduce using rule 81 (expression)]
    RIGHT_OP	[reduce using rule 81 (expression)]
    RIGHT_OP_3	[reduce using rule 81 (expression)]
    LEFT_OP	[reduce using rule 81 (expression)]
    AND_OP	[reduce using rule 81 (expression)]
    AND 	[reduce using rule 81 (expression)]
    NOT_BIT	[reduce using rule 81 (expression)]
    ASSIGN_BIT	[reduce using rule 81 (expression)]
    $default	reduce using rule 81 (expression)



state 176

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression XOR expression .   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 83 (expression)]
    NE  	[reduce using rule 83 (expression)]
    LT  	[reduce using rule 83 (expression)]
    GT  	[reduce using rule 83 (expression)]
    LE  	[reduce using rule 83 (expression)]
    GE  	[reduce using rule 83 (expression)]
    SEARCH_SUBSTR	[reduce using rule 83 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 83 (expression)]
    POWER	[reduce using rule 83 (expression)]
    ADD 	[reduce using rule 83 (expression)]
    SUB 	[reduce using rule 83 (expression)]
    MUL 	[reduce using rule 83 (expression)]
    DIV 	[reduce using rule 83 (expression)]
    MOD 	[reduce using rule 83 (expression)]
    XOR 	[reduce using rule 83 (expression)]
    OR  	[reduce using rule 83 (expression)]
    OR_OP	[reduce using rule 83 (expression)]
    RIGHT_OP	[reduce using rule 83 (expression)]
    RIGHT_OP_3	[reduce using rule 83 (expression)]
    LEFT_OP	[reduce using rule 83 (expression)]
    AND_OP	[reduce using rule 83 (expression)]
    AND 	[reduce using rule 83 (expression)]
    NOT_BIT	[reduce using rule 83 (expression)]
    ASSIGN_BIT	[reduce using rule 83 (expression)]
    $default	reduce using rule 83 (expression)



state 177

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression OR expression .   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 84 (expression)]
    NE  	[reduce using rule 84 (expression)]
    LT  	[reduce using rule 84 (expression)]
    GT  	[reduce using rule 84 (expression)]
    LE  	[reduce using rule 84 (expression)]
    GE  	[reduce using rule 84 (expression)]
    SEARCH_SUBSTR	[reduce using rule 84 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 84 (expression)]
    POWER	[reduce using rule 84 (expression)]
    ADD 	[reduce using rule 84 (expression)]
    SUB 	[reduce using rule 84 (expression)]
    MUL 	[reduce using rule 84 (expression)]
    DIV 	[reduce using rule 84 (expression)]
    MOD 	[reduce using rule 84 (expression)]
    XOR 	[reduce using rule 84 (expression)]
    OR  	[reduce using rule 84 (expression)]
    OR_OP	[reduce using rule 84 (expression)]
    RIGHT_OP	[reduce using rule 84 (expression)]
    RIGHT_OP_3	[reduce using rule 84 (expression)]
    LEFT_OP	[reduce using rule 84 (expression)]
    AND_OP	[reduce using rule 84 (expression)]
    AND 	[reduce using rule 84 (expression)]
    NOT_BIT	[reduce using rule 84 (expression)]
    ASSIGN_BIT	[reduce using rule 84 (expression)]
    $default	reduce using rule 84 (expression)



state 178

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression OR_OP expression .   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 76 (expression)]
    NE  	[reduce using rule 76 (expression)]
    LT  	[reduce using rule 76 (expression)]
    GT  	[reduce using rule 76 (expression)]
    LE  	[reduce using rule 76 (expression)]
    GE  	[reduce using rule 76 (expression)]
    SEARCH_SUBSTR	[reduce using rule 76 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 76 (expression)]
    POWER	[reduce using rule 76 (expression)]
    ADD 	[reduce using rule 76 (expression)]
    SUB 	[reduce using rule 76 (expression)]
    MUL 	[reduce using rule 76 (expression)]
    DIV 	[reduce using rule 76 (expression)]
    MOD 	[reduce using rule 76 (expression)]
    XOR 	[reduce using rule 76 (expression)]
    OR  	[reduce using rule 76 (expression)]
    OR_OP	[reduce using rule 76 (expression)]
    RIGHT_OP	[reduce using rule 76 (expression)]
    RIGHT_OP_3	[reduce using rule 76 (expression)]
    LEFT_OP	[reduce using rule 76 (expression)]
    AND_OP	[reduce using rule 76 (expression)]
    AND 	[reduce using rule 76 (expression)]
    NOT_BIT	[reduce using rule 76 (expression)]
    ASSIGN_BIT	[reduce using rule 76 (expression)]
    $default	reduce using rule 76 (expression)



state 179

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression RIGHT_OP expression .   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 85 (expression)]
    NE  	[reduce using rule 85 (expression)]
    LT  	[reduce using rule 85 (expression)]
    GT  	[reduce using rule 85 (expression)]
    LE  	[reduce using rule 85 (expression)]
    GE  	[reduce using rule 85 (expression)]
    SEARCH_SUBSTR	[reduce using rule 85 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 85 (expression)]
    POWER	[reduce using rule 85 (expression)]
    ADD 	[reduce using rule 85 (expression)]
    SUB 	[reduce using rule 85 (expression)]
    MUL 	[reduce using rule 85 (expression)]
    DIV 	[reduce using rule 85 (expression)]
    MOD 	[reduce using rule 85 (expression)]
    XOR 	[reduce using rule 85 (expression)]
    OR  	[reduce using rule 85 (expression)]
    OR_OP	[reduce using rule 85 (expression)]
    RIGHT_OP	[reduce using rule 85 (expression)]
    RIGHT_OP_3	[reduce using rule 85 (expression)]
    LEFT_OP	[reduce using rule 85 (expression)]
    AND_OP	[reduce using rule 85 (expression)]
    AND 	[reduce using rule 85 (expression)]
    NOT_BIT	[reduce using rule 85 (expression)]
    ASSIGN_BIT	[reduce using rule 85 (expression)]
    $default	reduce using rule 85 (expression)



state 180

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression RIGHT_OP_3 expression .   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 86 (expression)]
    NE  	[reduce using rule 86 (expression)]
    LT  	[reduce using rule 86 (expression)]
    GT  	[reduce using rule 86 (expression)]
    LE  	[reduce using rule 86 (expression)]
    GE  	[reduce using rule 86 (expression)]
    SEARCH_SUBSTR	[reduce using rule 86 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 86 (expression)]
    POWER	[reduce using rule 86 (expression)]
    ADD 	[reduce using rule 86 (expression)]
    SUB 	[reduce using rule 86 (expression)]
    MUL 	[reduce using rule 86 (expression)]
    DIV 	[reduce using rule 86 (expression)]
    MOD 	[reduce using rule 86 (expression)]
    XOR 	[reduce using rule 86 (expression)]
    OR  	[reduce using rule 86 (expression)]
    OR_OP	[reduce using rule 86 (expression)]
    RIGHT_OP	[reduce using rule 86 (expression)]
    RIGHT_OP_3	[reduce using rule 86 (expression)]
    LEFT_OP	[reduce using rule 86 (expression)]
    AND_OP	[reduce using rule 86 (expression)]
    AND 	[reduce using rule 86 (expression)]
    NOT_BIT	[reduce using rule 86 (expression)]
    ASSIGN_BIT	[reduce using rule 86 (expression)]
    $default	reduce using rule 86 (expression)



state 181

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression LEFT_OP expression .   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 87 (expression)]
    NE  	[reduce using rule 87 (expression)]
    LT  	[reduce using rule 87 (expression)]
    GT  	[reduce using rule 87 (expression)]
    LE  	[reduce using rule 87 (expression)]
    GE  	[reduce using rule 87 (expression)]
    SEARCH_SUBSTR	[reduce using rule 87 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 87 (expression)]
    POWER	[reduce using rule 87 (expression)]
    ADD 	[reduce using rule 87 (expression)]
    SUB 	[reduce using rule 87 (expression)]
    MUL 	[reduce using rule 87 (expression)]
    DIV 	[reduce using rule 87 (expression)]
    MOD 	[reduce using rule 87 (expression)]
    XOR 	[reduce using rule 87 (expression)]
    OR  	[reduce using rule 87 (expression)]
    OR_OP	[reduce using rule 87 (expression)]
    RIGHT_OP	[reduce using rule 87 (expression)]
    RIGHT_OP_3	[reduce using rule 87 (expression)]
    LEFT_OP	[reduce using rule 87 (expression)]
    AND_OP	[reduce using rule 87 (expression)]
    AND 	[reduce using rule 87 (expression)]
    NOT_BIT	[reduce using rule 87 (expression)]
    ASSIGN_BIT	[reduce using rule 87 (expression)]
    $default	reduce using rule 87 (expression)



state 182

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression AND_OP expression .   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 74 (expression)]
    NE  	[reduce using rule 74 (expression)]
    LT  	[reduce using rule 74 (expression)]
    GT  	[reduce using rule 74 (expression)]
    LE  	[reduce using rule 74 (expression)]
    GE  	[reduce using rule 74 (expression)]
    SEARCH_SUBSTR	[reduce using rule 74 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 74 (expression)]
    POWER	[reduce using rule 74 (expression)]
    ADD 	[reduce using rule 74 (expression)]
    SUB 	[reduce using rule 74 (expression)]
    MUL 	[reduce using rule 74 (expression)]
    DIV 	[reduce using rule 74 (expression)]
    MOD 	[reduce using rule 74 (expression)]
    XOR 	[reduce using rule 74 (expression)]
    OR  	[reduce using rule 74 (expression)]
    OR_OP	[reduce using rule 74 (expression)]
    RIGHT_OP	[reduce using rule 74 (expression)]
    RIGHT_OP_3	[reduce using rule 74 (expression)]
    LEFT_OP	[reduce using rule 74 (expression)]
    AND_OP	[reduce using rule 74 (expression)]
    AND 	[reduce using rule 74 (expression)]
    NOT_BIT	[reduce using rule 74 (expression)]
    ASSIGN_BIT	[reduce using rule 74 (expression)]
    $default	reduce using rule 74 (expression)



state 183

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression AND expression .   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 82 (expression)]
    NE  	[reduce using rule 82 (expression)]
    LT  	[reduce using rule 82 (expression)]
    GT  	[reduce using rule 82 (expression)]
    LE  	[reduce using rule 82 (expression)]
    GE  	[reduce using rule 82 (expression)]
    SEARCH_SUBSTR	[reduce using rule 82 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 82 (expression)]
    POWER	[reduce using rule 82 (expression)]
    ADD 	[reduce using rule 82 (expression)]
    SUB 	[reduce using rule 82 (expression)]
    MUL 	[reduce using rule 82 (expression)]
    DIV 	[reduce using rule 82 (expression)]
    MOD 	[reduce using rule 82 (expression)]
    XOR 	[reduce using rule 82 (expression)]
    OR  	[reduce using rule 82 (expression)]
    OR_OP	[reduce using rule 82 (expression)]
    RIGHT_OP	[reduce using rule 82 (expression)]
    RIGHT_OP_3	[reduce using rule 82 (expression)]
    LEFT_OP	[reduce using rule 82 (expression)]
    AND_OP	[reduce using rule 82 (expression)]
    AND 	[reduce using rule 82 (expression)]
    NOT_BIT	[reduce using rule 82 (expression)]
    ASSIGN_BIT	[reduce using rule 82 (expression)]
    $default	reduce using rule 82 (expression)



state 184

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression NOT_BIT expression .   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 98 (expression)]
    NE  	[reduce using rule 98 (expression)]
    LT  	[reduce using rule 98 (expression)]
    GT  	[reduce using rule 98 (expression)]
    LE  	[reduce using rule 98 (expression)]
    GE  	[reduce using rule 98 (expression)]
    SEARCH_SUBSTR	[reduce using rule 98 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 98 (expression)]
    POWER	[reduce using rule 98 (expression)]
    ADD 	[reduce using rule 98 (expression)]
    SUB 	[reduce using rule 98 (expression)]
    MUL 	[reduce using rule 98 (expression)]
    DIV 	[reduce using rule 98 (expression)]
    MOD 	[reduce using rule 98 (expression)]
    XOR 	[reduce using rule 98 (expression)]
    OR  	[reduce using rule 98 (expression)]
    OR_OP	[reduce using rule 98 (expression)]
    RIGHT_OP	[reduce using rule 98 (expression)]
    RIGHT_OP_3	[reduce using rule 98 (expression)]
    LEFT_OP	[reduce using rule 98 (expression)]
    AND_OP	[reduce using rule 98 (expression)]
    AND 	[reduce using rule 98 (expression)]
    NOT_BIT	[reduce using rule 98 (expression)]
    ASSIGN_BIT	[reduce using rule 98 (expression)]
    $default	reduce using rule 98 (expression)



state 185

    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression ASSIGN_BIT expression .   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    EQ  	[reduce using rule 97 (expression)]
    NE  	[reduce using rule 97 (expression)]
    LT  	[reduce using rule 97 (expression)]
    GT  	[reduce using rule 97 (expression)]
    LE  	[reduce using rule 97 (expression)]
    GE  	[reduce using rule 97 (expression)]
    SEARCH_SUBSTR	[reduce using rule 97 (expression)]
    NOT_SEARCH_SUBSTR	[reduce using rule 97 (expression)]
    POWER	[reduce using rule 97 (expression)]
    ADD 	[reduce using rule 97 (expression)]
    SUB 	[reduce using rule 97 (expression)]
    MUL 	[reduce using rule 97 (expression)]
    DIV 	[reduce using rule 97 (expression)]
    MOD 	[reduce using rule 97 (expression)]
    XOR 	[reduce using rule 97 (expression)]
    OR  	[reduce using rule 97 (expression)]
    OR_OP	[reduce using rule 97 (expression)]
    RIGHT_OP	[reduce using rule 97 (expression)]
    RIGHT_OP_3	[reduce using rule 97 (expression)]
    LEFT_OP	[reduce using rule 97 (expression)]
    AND_OP	[reduce using rule 97 (expression)]
    AND 	[reduce using rule 97 (expression)]
    NOT_BIT	[reduce using rule 97 (expression)]
    ASSIGN_BIT	[reduce using rule 97 (expression)]
    $default	reduce using rule 97 (expression)



state 186

    inc  ->  INCLUDE LEFT_PARENTHESIS STR_FIRST RIGHT_PARENTHESIS .   (rule 47)

    $default	reduce using rule 47 (inc)



state 187

    function_declaration  ->  FUNCTION LEFT_PARENTHESIS argument_declaration RIGHT_PARENTHESIS . body   (rule 7)

    LEFT_BRACE	shift, and go to state 13

    body	go to state 201



state 188

    first_argument_declaration  ->  identifier ',' first_argument_declaration .   (rule 11)

    $default	reduce using rule 11 (first_argument_declaration)



state 189

    function_call  ->  identifier LEFT_PARENTHESIS argument_list RIGHT_PARENTHESIS .   (rule 48)

    $default	reduce using rule 48 (function_call)



state 190

    first_argument_list  ->  first_argument_list ',' . argument   (rule 52)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    argument	go to state 202
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 148
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 149
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 191

    argument  ->  identifier ':' . expression   (rule 54)

    STR_FIRST	shift, and go to state 45
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_PARENTHESIS	shift, and go to state 46
    NOT 	shift, and go to state 47
    BIT 	shift, and go to state 48
    INTEGER	shift, and go to state 49
    IDENTIFIER	shift, and go to state 14
    '[' 	shift, and go to state 50

    function_call	go to state 51
    aff 	go to state 52
    lvalue	go to state 34
    identifier	go to state 53
    array_elem	go to state 54
    post_pre_command	go to state 55
    expression	go to state 203
    const_array	go to state 57
    atom	go to state 58
    var 	go to state 59
    var_name	go to state 60
    ipaddr	go to state 61



state 192

    array_elem  ->  identifier '[' array_index ']' .   (rule 67)

    $default	reduce using rule 67 (array_elem)



state 193

    if_body  ->  IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command .   (rule 33)
    if_body  ->  IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command . ELSE command   (rule 34)

    ELSE	shift, and go to state 204

    ELSE	[reduce using rule 33 (if_body)]
    $default	reduce using rule 33 (if_body)



state 194

    for_loop  ->  FOR LEFT_PARENTHESIS aff_func ';' expression . ';' aff_func RIGHT_PARENTHESIS command   (rule 39)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130
    ';' 	shift, and go to state 205



state 195

    foreach_loop  ->  FOREACH identifier LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . command   (rule 42)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    $default	reduce using rule 21 (simple_command)

    body	go to state 21
    command	go to state 206
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 196

    while_loop  ->  WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command .   (rule 40)

    $default	reduce using rule 40 (while_loop)



state 197

    repeat_loop  ->  REPEAT command UNTIL expression ';' .   (rule 41)

    $default	reduce using rule 41 (repeat_loop)



state 198

    ipaddr  ->  INTEGER '.' INTEGER '.' . INTEGER '.' INTEGER   (rule 118)

    INTEGER	shift, and go to state 207



state 199

    array_data  ->  STR_FIRST ARROW simple_array_data .   (rule 110)

    $default	reduce using rule 110 (array_data)



state 200

    list_array_data  ->  array_data ',' list_array_data .   (rule 108)

    $default	reduce using rule 108 (list_array_data)



state 201

    function_declaration  ->  FUNCTION LEFT_PARENTHESIS argument_declaration RIGHT_PARENTHESIS body .   (rule 7)

    $default	reduce using rule 7 (function_declaration)



state 202

    first_argument_list  ->  first_argument_list ',' argument .   (rule 52)

    $default	reduce using rule 52 (first_argument_list)



state 203

    argument  ->  identifier ':' expression .   (rule 54)
    expression  ->  expression . AND_OP expression   (rule 74)
    expression  ->  expression . OR_OP expression   (rule 76)
    expression  ->  expression . ADD expression   (rule 77)
    expression  ->  expression . SUB expression   (rule 78)
    expression  ->  expression . DIV expression   (rule 80)
    expression  ->  expression . MOD expression   (rule 81)
    expression  ->  expression . AND expression   (rule 82)
    expression  ->  expression . XOR expression   (rule 83)
    expression  ->  expression . OR expression   (rule 84)
    expression  ->  expression . RIGHT_OP expression   (rule 85)
    expression  ->  expression . RIGHT_OP_3 expression   (rule 86)
    expression  ->  expression . LEFT_OP expression   (rule 87)
    expression  ->  expression . MUL expression   (rule 89)
    expression  ->  expression . POWER expression   (rule 90)
    expression  ->  expression . NE expression   (rule 91)
    expression  ->  expression . EQ expression   (rule 92)
    expression  ->  expression . LT expression   (rule 93)
    expression  ->  expression . GT expression   (rule 94)
    expression  ->  expression . LE expression   (rule 95)
    expression  ->  expression . GE expression   (rule 96)
    expression  ->  expression . ASSIGN_BIT expression   (rule 97)
    expression  ->  expression . NOT_BIT expression   (rule 98)
    expression  ->  expression . SEARCH_SUBSTR expression   (rule 99)
    expression  ->  expression . NOT_SEARCH_SUBSTR expression   (rule 100)

    EQ  	shift, and go to state 107
    NE  	shift, and go to state 108
    LT  	shift, and go to state 109
    GT  	shift, and go to state 110
    LE  	shift, and go to state 111
    GE  	shift, and go to state 112
    SEARCH_SUBSTR	shift, and go to state 113
    NOT_SEARCH_SUBSTR	shift, and go to state 114
    POWER	shift, and go to state 115
    ADD 	shift, and go to state 116
    SUB 	shift, and go to state 117
    MUL 	shift, and go to state 118
    DIV 	shift, and go to state 119
    MOD 	shift, and go to state 120
    XOR 	shift, and go to state 121
    OR  	shift, and go to state 122
    OR_OP	shift, and go to state 123
    RIGHT_OP	shift, and go to state 124
    RIGHT_OP_3	shift, and go to state 125
    LEFT_OP	shift, and go to state 126
    AND_OP	shift, and go to state 127
    AND 	shift, and go to state 128
    NOT_BIT	shift, and go to state 129
    ASSIGN_BIT	shift, and go to state 130

    $default	reduce using rule 54 (argument)



state 204

    if_body  ->  IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command ELSE . command   (rule 34)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    $default	reduce using rule 21 (simple_command)

    body	go to state 21
    command	go to state 208
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 205

    for_loop  ->  FOR LEFT_PARENTHESIS aff_func ';' expression ';' . aff_func RIGHT_PARENTHESIS command   (rule 39)

    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    IDENTIFIER	shift, and go to state 14

    $default	reduce using rule 43 (aff_func)

    aff_func	go to state 209
    function_call	go to state 91
    aff 	go to state 92
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 93



state 206

    foreach_loop  ->  FOREACH identifier LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command .   (rule 42)

    $default	reduce using rule 42 (foreach_loop)



state 207

    ipaddr  ->  INTEGER '.' INTEGER '.' INTEGER . '.' INTEGER   (rule 118)

    '.' 	shift, and go to state 210



state 208

    if_body  ->  IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS command ELSE command .   (rule 34)

    $default	reduce using rule 34 (if_body)



state 209

    for_loop  ->  FOR LEFT_PARENTHESIS aff_func ';' expression ';' aff_func . RIGHT_PARENTHESIS command   (rule 39)

    RIGHT_PARENTHESIS	shift, and go to state 211



state 210

    ipaddr  ->  INTEGER '.' INTEGER '.' INTEGER '.' . INTEGER   (rule 118)

    INTEGER	shift, and go to state 212



state 211

    for_loop  ->  FOR LEFT_PARENTHESIS aff_func ';' expression ';' aff_func RIGHT_PARENTHESIS . command   (rule 39)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    FOREACH	shift, and go to state 3
    WHILE	shift, and go to state 4
    REPEAT	shift, and go to state 5
    BREAK	shift, and go to state 6
    CONTINUE	shift, and go to state 7
    RETURN	shift, and go to state 8
    INCLUDE	shift, and go to state 9
    INC_OP	shift, and go to state 11
    DEC_OP	shift, and go to state 12
    LEFT_BRACE	shift, and go to state 13
    IDENTIFIER	shift, and go to state 14
    LOCAL	shift, and go to state 15
    GLOBAL	shift, and go to state 16
    COMMENT	shift, and go to state 17

    $default	reduce using rule 21 (simple_command)

    body	go to state 21
    command	go to state 213
    simple_command	go to state 23
    ret 	go to state 24
    if_body	go to state 25
    loop	go to state 26
    for_loop	go to state 27
    while_loop	go to state 28
    repeat_loop	go to state 29
    foreach_loop	go to state 30
    inc 	go to state 31
    function_call	go to state 32
    aff 	go to state 33
    lvalue	go to state 34
    identifier	go to state 35
    array_elem	go to state 36
    post_pre_command	go to state 37
    loc 	go to state 38
    glob	go to state 39



state 212

    ipaddr  ->  INTEGER '.' INTEGER '.' INTEGER '.' INTEGER .   (rule 118)

    $default	reduce using rule 118 (ipaddr)



state 213

    for_loop  ->  FOR LEFT_PARENTHESIS aff_func ';' expression ';' aff_func RIGHT_PARENTHESIS command .   (rule 39)

    $default	reduce using rule 39 (for_loop)



state 214

    $   	go to state 215



state 215

    $   	go to state 216



state 216

    $default	accept
